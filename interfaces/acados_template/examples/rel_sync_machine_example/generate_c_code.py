from acados_template import *
import acados_template as at
import numpy as np
from ctypes import *
import matplotlib
import matplotlib.pyplot as plt
import scipy.linalg

# fitted psi_d map

def psi_d_num(x,y):
    #    This function was generated by the Symbolic Math Toolbox version 8.0.
    #    07-Feb-2018 23:07:49

    psi_d_expression = x*(-4.215858085639979e-3) + \
            exp(y**2*(-8.413493151721978e-5))*atan(x*1.416834085282644e-1)*8.834738694115108e-1

    return psi_d_expression

def psi_q_num(x,y):
    #    This function was generated by the Symbolic Math Toolbox version 8.0.
    #    07-Feb-2018 23:07:50

    psi_q_expression = y*1.04488335702649e-2+exp(x**2*(-1.0/7.2e1))*atan(y)*6.649036351062812e-2

    return psi_q_expression

def export_dae_model():

    model_name = 'rsm'

    # constants
    p = 2
    theta = 0.0352
    Rs = 0.4
    m_load = 0.0
    udc = 580
    u_max = udc/sqrt(3)
    i_max = 10
    psi_max = 0.1
    J = np.array([[0, -1], [1, 0]])
    kappa = 2/3

    # set up states 
    psi_d = SX.sym('psi_d')
    psi_q = SX.sym('psi_q')
    x = vertcat(psi_d, psi_q)

    # set up controls 
    u_d = SX.sym('u_d')
    u_q = SX.sym('u_q')
    u = vertcat(u_d, u_q)

    # set up algebraic variables 
    i_d = SX.sym('i_d')
    i_q = SX.sym('i_q')
    z = vertcat(i_d, i_q)
    
    # set up xdot 
    psi_d_dot = SX.sym('psi_d_dot')
    psi_q_dot = SX.sym('psi_q_dot')
    xdot = vertcat(psi_d_dot, psi_q_dot)

    # set up parameters
    w = SX.sym('w')
    p = vertcat(w)
    p = []

    # build flux expression
    Psi = vertcat(psi_d_num(i_d, i_q), psi_q_num(i_d, i_q))
    
    # dynamics     
    # TODO(andrea): need to add w as parameter!!!!
    f_impl = vertcat(   psi_d_dot - u_d + Rs*i_d - 0*psi_q, \
                        psi_q_dot - u_q + Rs*i_q + 0*psi_d, \
                        psi_d - Psi[0], \
                        psi_q - Psi[1])

    model = ode_model()

    model.f_impl_expr = f_impl
    model.f_expl_expr = []
    model.x = x
    model.xdot = xdot
    model.u = u
    model.z = z
    model.p = p
    model.name = model_name

    return model 

# create render arguments
ra = ocp_nlp_render_arguments()

# export model 
model = export_dae_model()

# set model_name 
ra.model_name = model.name

Tf  = 0.005
nx  = model.x.size()[0]
nu  = model.u.size()[0]
nz  = model.z.size()[0]
ny  = nu + nz
nyN = nx
N   = 10

# set ocp_nlp_dimensions
nlp_dims     = ra.dims
nlp_dims.nx  = nx 
nlp_dims.nz  = nz 
nlp_dims.ny  = ny 
nlp_dims.nyN = nyN 
nlp_dims.nbx = 0
nlp_dims.nbu = 0 
nlp_dims.nu  = model.u.size()[0]
nlp_dims.N   = N

# set weighting matrices
nlp_cost = ra.cost
Q = np.eye(nx)
Q[0,0] = 1e1
Q[1,1] = 1e1

R = np.eye(nu)
R[0,0] = 1e-2
R[1,1] = 1e-2

nlp_cost.W = scipy.linalg.block_diag(Q, R) 

Vx = np.zeros((ny, nx))
Vx[0,0] = 0.0
Vx[1,1] = 0.0

nlp_cost.Vx = Vx

Vu = np.zeros((ny, nu))
Vu[2,0] = 1.0
nlp_cost.Vu = Vu

Vz = np.zeros((ny, nz))
Vz[0,0] = 0.0
Vz[1,1] = 0.0

nlp_cost.Vz = Vz

nlp_cost.WN = Q 

VxN = np.zeros((ny, nx))
VxN[0,0] = 0.0
VxN[1,1] = 0.0

nlp_cost.VxN = VxN

nlp_cost.yref  = np.zeros((ny, 1))
nlp_cost.yrefN = np.zeros((nyN, 1))

# setting bounds
Fmax = 80.0
nlp_con = ra.constraints
nlp_con.lbu = np.array([-Fmax])
nlp_con.ubu = np.array([+Fmax])
nlp_con.x0 = np.array([0.0, 0.0])

# set constants
ra.constants = []

# set QP solver
# ra.solver_config.qp_solver = 'PARTIAL_CONDENSING_HPIPM'
ra.solver_config.qp_solver = 'FULL_CONDENSING_QPOASES'
ra.solver_config.hessian_approx = 'GAUSS_NEWTON'
# ra.solver_config.hessian_approx = 'EXACT'
# ra.solver_config.integrator_type = 'ERK'
ra.solver_config.integrator_type = 'IRK'

# set prediction horizon
ra.solver_config.tf = Tf
ra.solver_config.nlp_solver_type = 'SQP'

# set header path
ra.acados_include_path = '/usr/local/include'
ra.acados_lib_path = '/usr/local/lib'

generate_solver(model, ra)

# make 
os.chdir('c_generated_code')
os.system('make')
os.system('make shared_lib')
os.chdir('..')

acados   = CDLL('c_generated_code/acados_solver_rsm.so')

acados.acados_create()

nlp_opts = acados.acados_get_nlp_opts()
nlp_dims = acados.acados_get_nlp_dims()
nlp_config = acados.acados_get_nlp_config()
nlp_out = acados.acados_get_nlp_out()
nlp_in = acados.acados_get_nlp_in()

# closed loop simulation TODO(add proper simulation)
Nsim = 100

lb0 = np.ascontiguousarray(np.zeros((5,1)), dtype=np.float64)
ub0 = np.ascontiguousarray(np.zeros((5,1)), dtype=np.float64)
lb0 = cast(lb0.ctypes.data, POINTER(c_double))
ub0 = cast(ub0.ctypes.data, POINTER(c_double))

x0 = np.ascontiguousarray(np.zeros((4,1)), dtype=np.float64)
x0 = cast(x0.ctypes.data, POINTER(c_double))
u0 = np.ascontiguousarray(np.zeros((1,1)), dtype=np.float64)
u0 = cast(u0.ctypes.data, POINTER(c_double))

simX = np.ndarray((Nsim, nx))
simU = np.ndarray((Nsim, nu))

for i in range(Nsim):
    acados.acados_solve()

    # get solution
    acados.ocp_nlp_out_get(nlp_config, nlp_dims, nlp_out, 0, "x", x0)
    acados.ocp_nlp_out_get(nlp_config, nlp_dims, nlp_out, 0, "u", u0)
    
    for j in range(nx):
        simX[i,j] = x0[j]
    for j in range(nu):
        simU[i,j] = u0[j]
    
    # update initial condition
    acados.ocp_nlp_out_get(nlp_config, nlp_dims, nlp_out, 1, "x", x0)

    # ocp_nlp_constraints_model_set(nlp_config, nlp_dims, nlp_in, 0, "lb", lb0)

    acados.ocp_nlp_constraints_model_set.argtypes = [c_void_p, c_void_p, c_void_p, c_int, c_char_p, POINTER(c_double)]
    field_name = "lbx"
    arg = field_name.encode('utf-8')
    # acados.ocp_nlp_constraints_bounds_set(nlp_config, nlp_dims, nlp_in, 0, arg, x0)
    acados.ocp_nlp_constraints_model_set(nlp_config, nlp_dims, nlp_in, 0, arg, x0)
    field_name = "ubx"
    arg = field_name.encode('utf-8')
    # acados.ocp_nlp_constraints_bounds_set(nlp_config, nlp_dims, nlp_in, 0, arg, x0)
    acados.ocp_nlp_constraints_model_set(nlp_config, nlp_dims, nlp_in, 0, arg, x0)

# plot results
t = np.linspace(0.0, Tf/N, Nsim)
plt.subplot(2, 1, 1)
plt.step(t, simU, 'r')
plt.title('closed-loop simulation')
plt.ylabel('u')
plt.xlabel('t')
plt.grid(True)
plt.subplot(2, 1, 2)
plt.plot(t, simX[:,2])
plt.ylabel('theta')
plt.xlabel('t')
plt.grid(True)
plt.show()

# free memory
acados.acados_free()


